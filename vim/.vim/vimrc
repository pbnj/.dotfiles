nnoremap <silent><nowait><space> <nop>
let g:mapleader = ' '

" netrw
let g:netrw_keepdir = 0
let g:netrw_fastbrowse = 0
let g:netrw_localrmdir = 'rm -rf'

" Enable built-in plugin to filter quickfix list. See :h :Cfilter
packadd cfilter

if empty(glob('~/.vim//pack/minpac/opt/minpac'))
  call system('git clone https://github.com/k-takata/minpac.git ~/.vim/pack/minpac/opt/minpac')
endif

packadd minpac

if exists('g:loaded_minpac')
  command! PackUpdate call minpac#update()
  command! PackClean call minpac#clean()

  call minpac#init()

  call minpac#add('https://github.com/dense-analysis/ale')
  let &omnifunc = 'ale#completion#OmniFunc'
  let g:ale_lint_on_text_changed = 1
  let g:ale_echo_cursor = 0
  let g:ale_fix_on_save = 1
  let g:ale_floating_preview = 1
  let g:ale_hover_cursor = 0
  let g:ale_virtualtext_cursor = 1
  let g:ale_fixers = { '*' : [ 'remove_trailing_lines', 'trim_whitespace' ] }
  nnoremap <leader>gd <cmd>ALEGoToDefinition<cr>
  nnoremap <leader>k <cmd>ALEHover<cr>
  nnoremap ]d <cmd>ALENext<cr>
  nnoremap [d <cmd>ALEPrevious<cr>

  call minpac#add('https://github.com/junegunn/fzf', { 'subdir': './plugin', 'do': { -> fzf#install() } })
  call minpac#add('https://github.com/junegunn/fzf.vim')
  let project_finder = executable('fd') ? 'fd . ~/Projects --type d' : 'find ~/Projects -type d -not \( -path *.git -prune \) -not \( -path *.terraform -prune \)'
  command! -bang Projects call fzf#run(fzf#wrap({'source': project_finder,'options': '--prompt=Projects\>\ '},<bang>0))
  command! URLs call fzf#run(fzf#wrap({'source': map(filter(uniq(split(join(getline(1,'$'),' '),' ')), 'v:val =~ "http"'), {k,v->substitute(v,'\(''\|)\|"\|,\)','','g')}), 'sink': executable('open') ? '!open' : '!xdg-open', 'options': '--multi --prompt=URLs\>\ '}))
  command! F Files
  command! FF Files %:p:h
  nnoremap <leader>bb <cmd>Buffers<cr>
  nnoremap <leader>ff <cmd>GFiles<cr>
  nnoremap <leader>FF <cmd>Files %:p:h<cr>
  nnoremap <leader>uu <cmd>URLs<cr>

  call minpac#add('https://github.com/editorconfig/editorconfig-vim')
  call minpac#add('https://github.com/ludovicchabant/vim-gutentags')
  call minpac#add('https://github.com/machakann/vim-highlightedyank')
  call minpac#add('https://github.com/mhinz/vim-signify')
  call minpac#add('https://github.com/pbnj/pbnj.vim')
  call minpac#add('https://github.com/pbnj/terradoc.vim')
  call minpac#add('https://github.com/pbnj/vim-britive')
  call minpac#add('https://github.com/sheerun/vim-polyglot')
  call minpac#add('https://github.com/tpope/vim-commentary')
  call minpac#add('https://github.com/tpope/vim-eunuch')
  call minpac#add('https://github.com/tpope/vim-fugitive')
  call minpac#add('https://github.com/tpope/vim-rsi')

endif

filetype plugin indent on

syntax on

" vim options
let vim_undodir = expand('~/.vim/undo/')
if !isdirectory(vim_undodir) | call mkdir(vim_undodir) | endif

let &autoindent = 1
let &autoread = 1
let &background = system('defaults read -g AppleInterfaceStyle') =~ '^Dark' ? 'dark' : 'light'
let &backspace = 'indent,eol,start'
let &breakindent = 1
let &clipboard = 'unnamed,unnamedplus'
let &completeopt = 'menu'
let &cursorline = 0
let &encoding = 'utf-8'
let &errorformat = '%f:%l:%m,%f:%l:%c:%m'
let &fillchars = 'vert:│,foldclose:⎯,fold:⎯,diff:⎯,eob: '
let &grepformat = '%f:%l:%c:%m'
let &grepprg = executable('rg') ? 'rg --vimgrep --line-number --column $*' : executable('git') ? 'git grep --line-number --column $*' : 'grep -HIn --line-buffered $*'
let &hidden = 1
let &hlsearch = 1
let &ignorecase = 1
let &incsearch = 1
let &infercase = 1
let &laststatus = 2
let &lazyredraw = 1
let &linebreak = 1
let &list = 1
let &listchars = 'tab:┊ ,trail:·'
let &modeline = 1
let &mouse = 'a'
let &number = 1
let &secure = 1
let &shortmess = 'filnxtToOc'
let &showmode = 1
let &signcolumn = 'yes'
let &smartcase = 1
let &smarttab = 1
let &statusline = ' %f %#Error#%m%*%r%h%w%q'
let &swapfile = 0
let &t_Co = 16
let &termguicolors = 0
let &ttimeout = 1
let &ttimeoutlen = 50
let &ttyfast = 1
let &undodir = vim_undodir
let &undofile = 1
let &wildignorecase = 1
let &wildmenu = 1
let &wildmode = 'longest:full,full'
let &wrap = 0

augroup cursorline_toggle
  autocmd!
  autocmd InsertEnter,InsertLeave * setlocal cursorline!
augroup end

" Re-open nested vim-in-vim in outer vim
command! Unwrap let g:file = expand('%') | bdelete | exec 'silent !echo -e "\033]51;[\"drop\", \"'..g:file..'\"]\007"' | q

" GitBrowse takes a dictionary and opens files on remote git repo websites.
function! GitBrowse(args) abort
  let l:branch = len(a:args.branch) ? a:args.branch : 'origin'
  let l:remote = trim(system('git config branch.'..l:branch..'.remote'))
  let l:cmd = 'git browse ' .. ((a:args.range) ? printf("%s %s %s %s",l:remote, a:args.filename, a:args.line1, a:args.line2) : printf("%s %s", l:remote, a:args.filename))
  echom l:cmd
  execute 'silent ! '..l:cmd | redraw!
endfunction
" View git repo, branch, & file in the browser
command! -range GB
      \ call GitBrowse({
      \   'branch': trim(system('git rev-parse --abbrev-ref HEAD 2>/dev/null')),
      \   'filename': trim(system('git ls-files --full-name ' .. expand('%'))),
      \   'range': <range>,
      \   'line1': <line1>,
      \   'line2': <line2>,
      \ })
command! GW Gwrite
command! GR execute 'lcd '..finddir('.git/..', expand('%:p:h')..';')
command! GC Git commit

" Quick tmux splits in cwd
command! TmuxSplit silent ! tmux split-window -f -c %:p:h
command! TmuxSplitH silent ! tmux split-window -fh -c %:p:h

command! -nargs=* Terminal call term_start([&shell,'-l'],{'cwd':expand('%:p:h')})

cnoremap <c-n> <c-Down>
cnoremap <c-p> <c-Up>
nnoremap <leader>cd <cmd>lcd %:p:h<cr>
nnoremap <leader>ee :ed **/*
nnoremap <leader>sp :sp **/*
nnoremap <leader>vs :vs **/*
nnoremap <leader>tt <cmd>Terminal<cr>
nnoremap C "_C
nnoremap Y y$
nnoremap c "_c
nnoremap cc "_cc
nnoremap q <Nop>
nnoremap x "_x
noremap <expr> N 'nN'[v:searchforward]
noremap <expr> n 'Nn'[v:searchforward]
tnoremap <esc> <c-\><c-n>
tnoremap <s-space> <space>

colorscheme pbnj
