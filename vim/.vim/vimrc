" vim:ts=2:sts=2:sw=2:et:
nnoremap <silent><nowait><space> <nop>
let g:mapleader = ' '

" Enable built-in plugin to filter quickfix list. See :h :Cfilter
packadd cfilter

" https://github.com/junegunn/vim-plug/wiki/tips
let data_dir = '~/.vim'
if empty(glob(data_dir .. '/autoload/plug.vim'))
  silent execute '!curl -fLo '..data_dir..'/autoload/plug.vim --create-dirs  https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim'
  autocmd VimEnter * PlugInstall --sync | source $MYVIMRC
endif

call plug#begin()

" ale
Plug 'https://github.com/dense-analysis/ale'
let &omnifunc                = 'ale#completion#OmniFunc'
let g:ale_echo_cursor        = 1
let g:ale_fix_on_save        = 1
let g:ale_floating_preview   = 1
let g:ale_hover_cursor       = 0
let g:ale_virtualtext_cursor = 0
let g:ale_fixers             = {
      \ '*'         : [ 'remove_trailing_lines', 'trim_whitespace', ] ,
      \ 'go'        : [ 'remove_trailing_lines', 'trim_whitespace', 'goimports' ] ,
      \ 'json'      : [ 'remove_trailing_lines', 'trim_whitespace', 'prettier' ] ,
      \ 'markdown'  : [ 'remove_trailing_lines', 'trim_whitespace', 'prettier' ] ,
      \ 'rego'      : [ 'remove_trailing_lines', 'trim_whitespace', 'opa' ] ,
      \ 'rust'      : [ 'remove_trailing_lines', 'trim_whitespace', 'analyzer', 'cargo' ] ,
      \ 'sh'        : [ 'remove_trailing_lines', 'trim_whitespace', 'shfmt' ] ,
      \ 'terraform' : [ 'remove_trailing_lines', 'trim_whitespace', 'terraform' ] ,
      \ 'yaml'      : [ 'remove_trailing_lines', 'trim_whitespace', 'prettier' ] ,
      \ }
nnoremap <leader>gd <cmd>ALEGoToDefinition<cr>
nnoremap <leader>k <cmd>ALEHover<cr>

" fzf
Plug 'https://github.com/junegunn/fzf', { 'dir': '~/.fzf', 'do': './install --all' }
Plug 'https://github.com/junegunn/fzf.vim'
let project_finder = executable('fd') ? 'fd . ~/Projects --type d' : 'find ~/Projects -type d -not \( -path *.git* -prune \) -not \( -path *.terraform* -prune \)'
command! -bang Projects
      \ call fzf#run(fzf#wrap({'source': project_finder,'options': '--prompt=Projects\>\ '},<bang>0))
command! URLs
      \ call fzf#run(fzf#wrap({'source': map(filter(uniq(split(join(getline(1,'$'),' '),' ')), 'v:val =~ "http"'), {k,v->substitute(v,'\(''\|)\|"\|,\)','','g')}), 'sink': executable('open') ? '!open' : '!xdg-open', 'options': '--multi --prompt=URLs\>\ '}))
nnoremap <leader>bb <cmd>Buffers<cr>
nnoremap <leader>ff <cmd>Files %:p:h<cr>
nnoremap <leader>uu <cmd>URLs<cr>

Plug 'https://github.com/airblade/vim-rooter'
Plug 'https://github.com/cocopon/iceberg.vim'
Plug 'https://github.com/editorconfig/editorconfig-vim'
Plug 'https://github.com/machakann/vim-highlightedyank'
Plug 'https://github.com/mhinz/vim-signify'
Plug 'https://github.com/pbnj/terradoc.vim'
Plug 'https://github.com/pbnj/vim-britive'
Plug 'https://github.com/sheerun/vim-polyglot'
Plug 'https://github.com/tpope/vim-abolish'
Plug 'https://github.com/tpope/vim-commentary'
Plug 'https://github.com/tpope/vim-endwise'
Plug 'https://github.com/tpope/vim-eunuch'
Plug 'https://github.com/tpope/vim-fugitive'
Plug 'https://github.com/tpope/vim-rsi'
Plug 'https://github.com/tpope/vim-surround'
Plug 'https://github.com/tpope/vim-unimpaired'
Plug 'https://github.com/tpope/vim-vinegar'
Plug 'https://github.com/wellle/tmux-complete.vim'
if executable('ctags') | Plug 'https://github.com/ludovicchabant/vim-gutentags' | endif

call plug#end()

filetype plugin indent on

" vim options
let vim_undodir = expand('~/.vim/undo/')
if !isdirectory(vim_undodir) | call mkdir(vim_undodir) | endif

let &autoindent     = 1
let &autoread       = 1
let &background     = system('defaults read -g AppleInterfaceStyle') =~ '^Dark' ?  'dark' : 'light'
let &backspace      = 'indent,eol,start'
let &breakindent    = 1
let &clipboard      = 'unnamed,unnamedplus'
let &completeopt    = 'menu'
let &cursorline     = 0
let &encoding       = 'utf-8'
let &errorformat    = '%f:%l:%m,%f:%l:%c:%m'
let &fillchars      = 'vert:│,foldclose:⎯,fold:⎯,diff:⎯,eob: '
let &grepformat     = '%f:%l:%c:%m'
let &grepprg        = executable('rg') ? 'rg --vimgrep --line-number --column $*' : executable('git') ?  'git grep --line-number --column $*' :  'grep -HIn --line-buffered $*'
let &hidden         = 1
let &hlsearch       = 1
let &ignorecase     = 1
let &incsearch      = 1
let &infercase      = 1
let &laststatus     = 2
let &lazyredraw     = 1
let &linebreak      = 1
let &list           = 1
let &listchars      = 'tab:| ,trail:·'
let &modeline       = 1
let &mouse          = 'a'
let &number         = 1
let &secure         = 1
let &shortmess      = 'filnxtToOc'
let &showmode       = 1
let &signcolumn     = 'yes'
let &smartcase      = 1
let &smarttab       = 1
let &statusline     = ' %f %#Error#%m%*%r%h%w%q'
let &swapfile       = 0
let &termguicolors  = 1
let &ttimeout       = 1
let &ttimeoutlen    = 50
let &ttyfast        = 1
let &undodir        = vim_undodir
let &undofile       = 1
let &wildignorecase = 1
let &wildmenu       = 1
let &wildmode       = 'longest:full,full'
let &wrap           = 0

let &wildignore   = '*.o,*.obj,*.bin,*.dll,*.exe,*.DS_Store,'
let &wildignore ..= '*.pdf,*/.ssh/*,*.pub,*.crt,*.key,*/cache/*,'
let &wildignore ..= '*/dist/*,*/node_modules/*,*/vendor/*,*/__pycache__/*,*/build/*,*/.git/*,*/.terraform/*'

augroup quickfix
  autocmd QuickFixCmdPost [^l]* nested cwindow
  autocmd QuickFixCmdPost    l* nested lwindow
augroup END

augroup cursorline_toggle
  autocmd!
  autocmd InsertEnter,InsertLeave * setlocal cursorline!
augroup END

augroup hlsearch_toggle
  autocmd!
  autocmd CmdlineEnter [/\?] :set hlsearch
  autocmd CmdlineLeave [/\?] :set nohlsearch
augroup END

" Completion function for `make`
function! MakeCompletion(A,L,P) abort
  let l:targets = systemlist('make -qp | awk -F'':'' ''/^[a-zA-Z0-9][^$#\/\t=]*:([^=]|$)/ {split($1,A,/ /);for(i in A)print A[i]}'' | grep -v Makefile | sort -u')
  return filter(l:targets, 'v:val =~ "^' .. a:A .. '"')
endfunction
command! -nargs=* -complete=customlist,MakeCompletion Make
      \ ! make -C %:p:h <args>
nnoremap <leader>mm :Make<space><c-d>

" Re-open nested vim-in-vim in outer vim
command! Unwrap let g:file = expand('%') | bdelete | exec 'silent !echo -e "\033]51;[\"drop\", \"'..g:file..'\"]\007"' | q

" Open dotfiles in vim
command! Dotfiles tabnew | Files $DOTFILES

" Markdown Viewer
command! -nargs=? -complete=file_in_path Glow execute 'silent ! glow --pager ' .. (len(<q-args>) ? string(<q-args>) : '%') | redraw!

" Terminal slide presentation
command! -nargs=? -complete=file_in_path Slides execute 'silent ! slides ' .. (len(<q-args>) ? string(<q-args>) : '%') | redraw!

" Command-line Git UI
command! LazyGit execute 'silent ! lazygit' | redraw!

" GitBrowse takes a dictionary and opens files on remote git repo websites.
function! GitBrowse(args) abort
  let l:branch = len(a:args.branch) ? a:args.branch : 'origin'
  let l:remote = trim(system('git config branch.'..l:branch..'.remote'))
  let l:cmd = 'git browse ' .. ((a:args.range) ? printf("%s %s %s %s",l:remote, a:args.filename, a:args.line1, a:args.line2) : printf("%s %s", l:remote, a:args.filename))
  echom l:cmd
  execute 'silent ! '..l:cmd | redraw!
endfunction
" View git repo, branch, & file in the browser
command! -range GB
      \ call GitBrowse({
      \   'branch': trim(system('git rev-parse --abbrev-ref HEAD 2>/dev/null')),
      \   'filename': trim(system('git ls-files --full-name ' .. expand('%'))),
      \   'range': <range>,
      \   'line1': <line1>,
      \   'line2': <line2>,
      \ })

nnoremap <leader>gg <cmd>G<cr>
nnoremap <leader>gr <cmd>execute 'lcd '..finddir('.git/..', expand('%:p:h')..';')<cr>
nnoremap <leader>gw <cmd>Gwrite<cr>

cnoremap <c-n> <c-Down>
cnoremap <c-p> <c-Up>
nnoremap <leader>br <cmd>BritiveConsoleFZF<cr>
nnoremap <leader>cd <cmd>lcd %:p:h<cr>
nnoremap <leader>ee :ed **/*
nnoremap <leader>sp :sp **/*
nnoremap <leader>vs :vs **/*
" nnoremap <leader>tt <cmd>terminal<cr>
nnoremap <leader>tt <cmd>call term_start([&shell,'-l'],{'cwd':expand('%:p:h')})<cr>
nnoremap C "_C
nnoremap Y y$
nnoremap c "_c
nnoremap cc "_cc
nnoremap q <Nop>
nnoremap x "_x
noremap <expr> N 'nN'[v:searchforward]
noremap <expr> n 'Nn'[v:searchforward]
tnoremap <esc> <c-\><c-n>
tnoremap <s-space> <space>

colorscheme iceberg
