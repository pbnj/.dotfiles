" vim:ts=2:sts=2:sw=2:et:
nnoremap <silent><nowait><space> <nop>
let g:mapleader = ' '

"-------------------------------------------------------------------------------
" Plugins
"-------------------------------------------------------------------------------

" https://github.com/junegunn/vim-plug/wiki/tips
if empty(glob('~/.vim/autoload/plug.vim'))
  silent execute '!curl -fLo ~/.vim/autoload/plug.vim --create-dirs https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim'
  autocmd VimEnter * PlugInstall --sync | source $MYVIMRC
endif

" Enable built-in plugin to filter quickfix list. See :h :Cfilter
packadd cfilter

let g:netrw_keepdir    = 0
let g:netrw_localrmdir = 'rm -r'

" Custom, priavte work-related configs
if filereadable(glob('~/.vim/work.vim'))
  source ~/.vim/work.vim
endif

" vim-signify
let g:signify_sign_add               = '|'
let g:signify_sign_delete            = '|'
let g:signify_sign_delete_first_line = '|'
let g:signify_sign_change            = '|'
let g:signify_sign_change_delete     = g:signify_sign_change

" ale
let g:ale_completion_enabled = 1
let g:ale_echo_cursor = 1
let g:ale_fix_on_save = 1
let g:ale_fixers = {'*': ['remove_trailing_lines', 'trim_whitespace']}
let g:ale_floating_preview = 1
let g:ale_hover_cursor = 0
let g:ale_sign_error = '●'
let g:ale_sign_info = '●'
let g:ale_sign_style_error = '●'
let g:ale_sign_style_warning = '●'
let g:ale_sign_warning = '●'
let g:ale_virtualtext_cursor = 0

call plug#begin()

Plug 'https://github.com/dense-analysis/ale'
Plug 'https://github.com/editorconfig/editorconfig-vim'
Plug 'https://github.com/ervandew/supertab'
Plug 'https://github.com/godlygeek/tabular'
Plug 'https://github.com/junegunn/fzf', { 'do': { -> fzf#install() } }
Plug 'https://github.com/junegunn/fzf.vim'
Plug 'https://github.com/machakann/vim-highlightedyank'
Plug 'https://github.com/mhinz/vim-signify'
Plug 'https://github.com/pbnj/pbnj.vim'
Plug 'https://github.com/pbnj/terradoc.vim'
Plug 'https://github.com/pbnj/vim-britive'
Plug 'https://github.com/pbnj/vim-ddgr'
Plug 'https://github.com/sheerun/vim-polyglot'
Plug 'https://github.com/thalesmello/webcomplete.vim'
Plug 'https://github.com/tpope/vim-abolish'
Plug 'https://github.com/tpope/vim-commentary'
Plug 'https://github.com/tpope/vim-eunuch'
Plug 'https://github.com/tpope/vim-fugitive'
Plug 'https://github.com/tpope/vim-rsi'
Plug 'https://github.com/tpope/vim-surround'
Plug 'https://github.com/tpope/vim-unimpaired'
Plug 'https://github.com/tpope/vim-vinegar'

call plug#end()

filetype plugin indent on

"-------------------------------------------------------------------------------
" Options
"-------------------------------------------------------------------------------

if !isdirectory(expand('~/.vim/undo/')) | call mkdir(expand('~/.vim/undo/')) | endif

set autoindent
set autoread
set backspace=indent,eol,start
set breakindent
set clipboard=unnamed,unnamedplus
set completefunc=webcomplete#complete
set completeopt-=preview
set cursorline
set dictionary+=/usr/share/dict/words
set encoding=utf-8
set errorformat^=%f:%l:%m,%f:%l:%c:%m
set formatoptions=tcqjno
set grepformat^=%f:%l:%c:%m
set hidden
set hlsearch
set ignorecase
set incsearch
set infercase
set keywordprg=:DDGR
set laststatus=2
set lazyredraw
set linebreak
set list
set listchars=tab:>\ ,trail:·
set modeline
set mouse=
set nobackup
set nofoldenable
set norelativenumber
set noruler
set noswapfile
set nowrap
set number
set omnifunc=ale#completion#OmniFunc
set secure
set shortmess=filnxtToOc
set showmode
set signcolumn=yes
set smartcase
set smarttab
set splitbelow
set splitright
set t_Co=16
set ttimeout
set ttimeoutlen=50
set ttyfast
set undodir=~/.vim/undo/
set undofile
set wildignore=*.o,*.obj,*.bin,*.dll,*.exe,*.DS_Store,*.pdf,*/.ssh/*,*.pub,*.crt,*.key,*/cache/*,*/dist/*,*/node_modules/*,*/vendor/*,*/__pycache__/*,*/build/*,*/.git/*
set wildignorecase
set wildmenu

" Better grep
if executable('rg')
  set grepprg=rg\ --vimgrep\ --line-number\ --column\ $*
elseif executable('git')
  set grepprg=git\ grep\ --line-number\ --column\ $*
else
  set grepprg=grep\ -HIn\ --line-buffered\ $*
endif

augroup quickfix
  autocmd QuickFixCmdPost [^l]* nested cwindow
  autocmd QuickFixCmdPost    l* nested lwindow
augroup END

"----------------------------------------
" Statusline
"----------------------------------------

set statusline=\ %f
set statusline+=\ %y
set statusline+=\ %#ErrorMsg#%m%*%r%h%w%q
set statusline+=\ %{FugitiveStatusline()}
set statusline+=\ %#ALEInfoSign#%{ale#engine#IsCheckingBuffer(bufnr())?'⟳':''}%*
set statusline+=\ %#ALEErrorSign#%{(ale#statusline#Count(bufnr()).error)?'●'.ale#statusline#Count(bufnr()).error:''}%*
set statusline+=\ %#ALEWarningSign#%{(ale#statusline#Count(bufnr()).warning)?'●'.ale#statusline#Count(bufnr()).warning:''}%*
set statusline+=%=
set statusline+=%3l:%3c\ (%P)

"-------------------------------------------------------------------------------
" Functions & Commands
"-------------------------------------------------------------------------------

function! MakeCompletion(A,L,P) abort
    let l:targets = systemlist('make -qp | awk -F'':'' ''/^[a-zA-Z0-9][^$#\/\t=]*:([^=]|$)/ {split($1,A,/ /);for(i in A)print A[i]}'' | grep -v Makefile | sort -u')
    return filter(l:targets, 'v:val =~ "^' . a:A . '"')
endfunction
command! -nargs=* -complete=customlist,MakeCompletion Make
      \ terminal make -C %:p:h <args>
nnoremap m<space> :Make<space><c-d>

" GitBrowse takes a dictionary and opens files on remote git repo websites.
function! GitBrowse(args) abort
  if a:args.filename ==# ''
    echoerr "Failed to `git browse`. Filename is missing or invalid."
    return
  endif
  let l:remote = trim(system('git config branch.'.a:args.branch.'.remote || echo "origin" '))
  if a:args.range == 0
    let l:cmd = 'git browse ' . l:remote . ' ' . a:args.filename
  else
    let l:cmd = 'git browse ' . l:remote . ' ' . a:args.filename . ' ' . a:args.line1 . ' ' . a:args.line2
  endif
  execute 'silent ! ' . l:cmd | redraw!
endfunction
" View git repo, branch, & file in the browser
command! -range GB
      \ call GitBrowse({
      \ 'branch': trim(system('git rev-parse --abbrev-ref HEAD 2>/dev/null')),
      \ 'filename': trim(system('git ls-files --full-name ' . expand('%'))),
      \ 'range': <range>,
      \ 'line1': <line1>,
      \ 'line2': <line2>,
      \ })
command! GC Git commit
command! GP Git! push
command! GR execute 'lcd ' . finddir('.git/..', expand('%:p:h').';')
command! GS Git! status %:h

function! StripTrailingSpaces() abort
  %s/\s\+$//e
endfunction
command! StripTrailingSpaces call StripTrailingSpaces()

function! StripTrailingNewLines() abort
  %s/\($\n\s*\)\+\%$//e
endfunction
command! StripTrailingNewLines call StripTrailingNewLines()

function! StripNewLines() abort
  g/^$/d
endfunction
command! StripNewLines call StripNewLines()

augroup fixer_general
  autocmd!
  autocmd BufWritePre,FileWritePre * call StripTrailingSpaces() | call StripTrailingNewLines()
augroup END

function! Open(...) abort
  if executable('xdg-open')
    silent call system('xdg-open ' . join(a:000, ' '))
  elseif executable('open')
    silent call system('open ' . join(a:000, ' '))
  elseif executable('open-cli')
    silent call system('open-cli ' . join(a:000, ' '))
  elseif executable('lynx')
    for url in a:000
      silent call term_start(['lynx', url])
    endfor
  elseif executable('w3m')
    for url in a:000
      silent call term_start(['w3m', url])
    endfor
  else
    echoerr "TODO: support more programs"
  endif
endfunction
command! -nargs=* Open
      \ call Open(<q-args>)

command! Projects
      \ call fzf#run(fzf#wrap({'source': 'find ~/Projects -type d -not \( -path *.git* -prune \) -not \( -path *.terraform* -prune \)'}))
command! URLs
      \ call fzf#run(fzf#wrap({'source': map(filter(uniq(split(join(getline(1,'$'),' '),' ')), 'v:val =~ "http"'), {k,v->substitute(v,'\(''\|)\|"\|,\)','','g')}), 'sink': 'Open', 'options': '--multi'}))

"-------------------------------------------------------------------------------
" Mappings
"-------------------------------------------------------------------------------

cnoremap <c-n> <c-Down>
cnoremap <c-p> <c-Up>
nnoremap <expr> <leader>ss '/\<'.expand('<cword>').'\><cr>'
nnoremap <leader>bb <cmd>b#<cr>
nnoremap <leader>cc <cmd>cc<cr>
nnoremap <leader>cd <cmd>lcd %:p:h<cr>
nnoremap <leader>ee :ed **/*
nnoremap <leader>es :sp **/*
nnoremap <leader>ev :vs **/*
nnoremap <leader>ff <cmd>Files<cr>
nnoremap <leader>fg <cmd>GFiles<cr>
nnoremap <leader>fs <cmd>Rg<cr>
nnoremap <leader>gg <cmd>G<cr>
nnoremap <leader>ll <cmd>ll<cr>
nnoremap <leader>tt <cmd>terminal<cr>
nnoremap <leader>w <cmd>write<cr>
nnoremap <leader>xx <cmd>20Lexplore<cr>
nnoremap <leader>ya <cmd>%y+<cr>
nnoremap C "_C
nnoremap Y y$
nnoremap c "_c
nnoremap cc "_cc
nnoremap x "_x
noremap <expr> N 'nN'[v:searchforward]
noremap <expr> n 'Nn'[v:searchforward]
tnoremap <esc> <c-\><c-n>
tnoremap <s-space> <space>

colorscheme pbnj
