" vim:ts=2:sts=2:sw=2:et:
nnoremap <silent><nowait><space> <nop>
let g:mapleader = ' '

"-------------------------------------------------------------------------------
" Plugins
"-------------------------------------------------------------------------------

" Enable built-in plugin to filter quickfix list. See :h :Cfilter
packadd cfilter

" Settings for built-in file explorer
let g:netrw_keepdir = 0
let g:netrw_altfile = 0
let g:netrw_liststyle = 3

" Custom, priavte work-related configs
if filereadable(glob('~/.vim/work.vim'))
  source ~/.vim/work.vim
endif

" ale
let g:ale_completion_enabled = 1
let g:ale_lint_on_text_changed = 1
let g:ale_fix_on_save = 1
let g:ale_fixers = {'*': ['remove_trailing_lines', 'trim_whitespace']}
let g:ale_floating_preview = 1
let g:ale_hover_cursor = 0
let g:ale_sign_error = '●'
let g:ale_sign_info = '●'
let g:ale_sign_style_error = '●'
let g:ale_sign_style_warning = '●'
let g:ale_sign_warning = '●'

nnoremap <leader>K <cmd>ALEHover<cr>

" vim-signify
let g:signify_sign_add = '│'
let g:signify_sign_delete = '│'
let g:signify_sign_delete_first_line = '│'
let g:signify_sign_change = '│'
let g:signify_sign_change_delete = g:signify_sign_change

" mucomplete
let g:mucomplete#chains = {}
let g:mucomplete#chains.default = ['path', 'omni', 'c-n', 'keyn', 'dict', 'uspl']
let g:mucomplete#chains.vim = ['path', 'cmd', 'keyn', 'c-n']

call plug#begin()
Plug 'https://github.com/dense-analysis/ale'
Plug 'https://github.com/editorconfig/editorconfig-vim'
Plug 'https://github.com/junegunn/fzf', { 'do': { -> fzf#install() } }
Plug 'https://github.com/junegunn/fzf.vim'
Plug 'https://github.com/lifepillar/vim-mucomplete'
Plug 'https://github.com/ludovicchabant/vim-gutentags'
Plug 'https://github.com/machakann/vim-highlightedyank'
Plug 'https://github.com/mhinz/vim-signify'
Plug 'https://github.com/pbnj/pbnj.vim'
Plug 'https://github.com/sheerun/vim-polyglot'
Plug 'https://github.com/tpope/vim-commentary'
Plug 'https://github.com/tpope/vim-eunuch'
Plug 'https://github.com/tpope/vim-fugitive'
Plug 'https://github.com/tpope/vim-rsi'
Plug 'https://github.com/tpope/vim-surround'
Plug 'https://github.com/tpope/vim-unimpaired'
Plug 'https://github.com/tpope/vim-vinegar'
Plug 'https://github.com/vim-test/vim-test'
call plug#end()

filetype plugin indent on

"-------------------------------------------------------------------------------
" Options
"-------------------------------------------------------------------------------

" Auto-toggle background based on system theme
" if system("defaults read -g AppleInterfaceStyle") =~ '^Dark'
"   set background=dark
" else
"   set background=light
" endif

if !isdirectory(expand('~/.vim/undo/'))
  mkdir(expand('~/.vim/undo/'))
endif

if has('nvim')
  set inccommand=split
else
  set ttyfast
  set undodir=~/.vim/undo/
endif

set autoindent
set autoread
set backspace=indent,eol,start
set breakindent
set clipboard=unnamed,unnamedplus
set encoding=utf-8
set fillchars=vert:\│,fold:-,eob:~
set formatoptions=tcqjno
set hidden
set ignorecase
set incsearch
set infercase
set laststatus=2
set lazyredraw
set linebreak
set list
set listchars=tab:\│\ ,trail:·
set modeline
set mouse=a
set nobackup
set nohlsearch
set norelativenumber
set noswapfile
set nowrap
set number
set omnifunc=ale#completion#OmniFunc
set ruler
set secure
set shortmess=filnxtToOc
set showmode
set signcolumn=yes
set smartcase
set smarttab
set splitbelow
set t_Co=16
set ttimeout
set ttimeoutlen=50
set undofile
set updatetime=100
set wildignore=*.o,*.obj,*.bin,*.dll,*.exe,*.DS_Store,*.pdf,*/.ssh/*,*.pub,*.crt,*.key,*/cache/*,*/dist/*,*/node_modules/*,*/tmp/*,*/vendor/*,*/__pycache__/*,*/build/*,*/.git/*
set wildignorecase
set wildmenu
set wildmode=longest:full,full
set wildoptions=pum

set statusline=%f
set statusline+=\ %{FugitiveStatusline()}
set statusline+=\ %#Error#%m%*%r%h%w%y%q\ %-3l,%-3c\ %P
set statusline+=\ %#SpellRare#%{ale#engine#IsCheckingBuffer(bufnr())?'\ Checking\ ':''}%*
set statusline+=\ %#Error#%{(ale#statusline#Count(bufnr()).error)?'\ E:'.ale#statusline#Count(bufnr()).error.'\ ':''}%*
set statusline+=\ %#Todo#%{(ale#statusline#Count(bufnr()).warning)?'\ W:'.ale#statusline#Count(bufnr()).warning.'\ ':''}%*

if executable('rg')
  let &grepprg = 'rg --vimgrep --hidden --smart-case'
else
  let &grepprg = 'grep -HIn $* -r .'
endif

let &errorformat='%f|%l| %m,%f:%l:%m,%f:%l:%c:%m'

"-------------------------------------------------------------------------------
" Commands
"-------------------------------------------------------------------------------

command! -nargs=* DDGR
      \ <mods> terminal ddgr --expand <args>
command! -nargs=1 Cheat
      \ <mods> terminal curl http://cheat.sh/<args>

" GitBrowse takes a dictionary and opens files on remote git repo websites.
function! GitBrowse(args) abort
  if a:args.filename ==# ''
    echoerr "Failed to `git browse`. Filename is missing or invalid."
    return
  endif
  let l:remote = trim(system('git config branch.'.a:args.branch.'.remote || echo "origin" '))
  if a:args.range == 0
    let l:cmd = 'git browse ' . l:remote . ' ' . a:args.filename
  else
    let l:cmd = 'git browse ' . l:remote . ' ' . a:args.filename . ' ' . a:args.line1 . ' ' . a:args.line2
  endif
  execute 'silent ! ' . l:cmd | redraw!
endfunction
command! -range GB call GitBrowse({
      \ 'branch': trim(system('git rev-parse --abbrev-ref HEAD 2>/dev/null')),
      \ 'filename': trim(system('git ls-files --full-name ' . expand('%'))),
      \ 'range': <range>,
      \ 'line1': <line1>,
      \ 'line2': <line2>,
      \ })

command! GC Git commit
command! GP Git! push
command! GR execute 'lcd ' . finddir('.git/..', expand('%:p:h').';')
command! GS Git! status %:h
command! GW Gwrite

"-------------------------------------------------------------------------------
" Mappings
"-------------------------------------------------------------------------------

nnoremap <expr> n 'Nn'[v:searchforward]
nnoremap <expr> N 'nN'[v:searchforward]
nnoremap <leader>bb :b <c-d>
nnoremap <leader>cc <cmd>cc<cr>
nnoremap <leader>cd <cmd>lcd %:p:h<cr>
nnoremap <leader>ee :ed **/*
nnoremap <leader>es :sp **/*
nnoremap <leader>ev :vs **/*
nnoremap <leader>ff :Cfind * -name<space>
nnoremap <leader>gd <cmd>ALEGoToDefinition<cr>
nnoremap <leader>gg <cmd>Git<cr>
nnoremap <leader>gK <cmd>ALEDocumentation<cr>
nnoremap <leader>gk <cmd>ALEHover<cr>
nnoremap <leader>gm <cmd>ALEGoToImplementation<cr>
nnoremap <leader>gq mzgggqG`z
nnoremap <leader>gr <cmd>ALEFindReferences<cr>
nnoremap <leader>gy <cmd>ALEGoToTypeDefinition<cr>
nnoremap <leader>ll <cmd>ll<cr>
nnoremap <leader>mm <cmd>lcd %:p:h<cr>:!clear; make<space>
nnoremap <leader>tt <cmd>lcd %:p:h<cr>:terminal<space>
nnoremap <leader>w <cmd>write<cr>
nnoremap <leader>ya <cmd>%y+<cr>
nnoremap C "_C
nnoremap c "_c
nnoremap cc "_cc
nnoremap x "_x
nnoremap Y y$
tnoremap <esc> <c-\><c-n>
tnoremap <s-space> <space>

" Colorscheme
colorscheme pbnj
