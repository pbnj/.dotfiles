" vim:ts=2:sts=2:sw=2:et:
nnoremap <silent><nowait><space> <nop>
let g:mapleader = ' '

"-------------------------------------------------------------------------------
" Plugins
"-------------------------------------------------------------------------------

" Enable built-in plugin to filter quickfix list. See :h :Cfilter
packadd cfilter

" Settings for built-in file explorer
let g:netrw_keepdir = 0
let g:netrw_altfile = 0

" Custom, priavte work-related configs
if filereadable(glob('~/.vim/work.vim'))
  source ~/.vim/work.vim
endif

" vim-signify
let g:signify_sign_add = '│'
let g:signify_sign_delete = '│'
let g:signify_sign_delete_first_line = '│'
let g:signify_sign_change = '│'
let g:signify_sign_change_delete = g:signify_sign_change

call plug#begin()
Plug 'https://github.com/editorconfig/editorconfig-vim'
Plug 'https://github.com/junegunn/fzf', { 'do': { -> fzf#install() } }
Plug 'https://github.com/junegunn/fzf.vim'
Plug 'https://github.com/ludovicchabant/vim-gutentags'
Plug 'https://github.com/machakann/vim-highlightedyank'
Plug 'https://github.com/mhinz/vim-signify'
Plug 'https://github.com/pbnj/pbnj.vim'
Plug 'https://github.com/sheerun/vim-polyglot'
Plug 'https://github.com/tpope/vim-commentary'
Plug 'https://github.com/tpope/vim-dispatch'
Plug 'https://github.com/tpope/vim-eunuch'
Plug 'https://github.com/tpope/vim-fugitive'
Plug 'https://github.com/tpope/vim-rsi'
Plug 'https://github.com/tpope/vim-surround'
Plug 'https://github.com/tpope/vim-unimpaired'
Plug 'https://github.com/tpope/vim-vinegar'
Plug 'https://github.com/vim-test/vim-test'
call plug#end()

filetype plugin indent on

"-------------------------------------------------------------------------------
" Options
"-------------------------------------------------------------------------------

if has('nvim')
  set inccommand=split
  augroup Terminal
    autocmd!
    autocmd TermOpen  * startinsert
    autocmd TermEnter * startinsert | setlocal nonumber nolist signcolumn=no
    autocmd TermLeave * stopinsert  | setlocal number
  augroup END
else
  if !isdirectory(expand('~/.vim/undo/'))
    call mkdir(expand('~/.vim/undo/'))
  endif
  set t_Co=16
  set ttyfast
  set undodir=~/.vim/undo/
endif

set autoindent
set autoread
set backspace=indent,eol,start
set breakindent
set clipboard=unnamed,unnamedplus
set completeopt-=preview
set encoding=utf-8
set errorformat^=%f:%l:%m,%f:%l:%c:%m
set fillchars=vert:\│,fold:-,eob:~
set formatoptions=tcqjno
set grepformat^=%f:%l:%c:%m
set hidden
set ignorecase
set incsearch
set infercase
set laststatus=2
set lazyredraw
set linebreak
set list
set listchars=tab:\│\ ,trail:·
set modeline
set mouse=
set nobackup
set nohlsearch
set norelativenumber
set noswapfile
set nowrap
set number
set omnifunc=syntaxcomplete#Complete
set ruler
set secure
set shortmess=filnxtToOc
set showmode
set signcolumn=yes
set smartcase
set smarttab
set splitbelow
set splitright
set ttimeout
set ttimeoutlen=50
set undofile
set updatetime=100
set wildignore=*.o,*.obj,*.bin,*.dll,*.exe,*.DS_Store,*.pdf,*/.ssh/*,*.pub,*.crt,*.key,*/cache/*,*/dist/*,*/node_modules/*,*/tmp/*,*/vendor/*,*/__pycache__/*,*/build/*,*/.git/*
set wildignorecase
set wildmenu

if v:version >= 900
  set wildoptions+=fuzzy
endif

" Better grep
if executable('rg')
  set grepprg=rg\ --vimgrep\ --line-number\ --column\ $*
elseif executable('git')
  set grepprg=git\ grep\ --line-number\ --column\ $*
else
  set grepprg=grep\ -HIn\ --line-buffered\ $*
endif

" Minimal statusline
set statusline=%f
set statusline+=\ %{FugitiveStatusline()}%*
set statusline+=\ %#ErrorMsg#%m%*%r%h%w%y%q
set statusline+=\ %l:%c/%L\ [%P]
set statusline+=%=
set statusline+=%#QFErrMarker#%{(g:qfsigns_error>0)?'[E:'.g:qfsigns_error.']':''}%*
set statusline+=%#QFWarnMarker#%{(g:qfsigns_warn>0)?'[W:'.g:qfsigns_warn.']':''}%*
set statusline+=%#QFInfoMarker#%{(g:qfsigns_info>0)?'[I:'.g:qfsigns_info.']':''}%*
set statusline+=\ [compiler:\ %{&makeprg}]

augroup quickfix
  autocmd!
  autocmd QuickFixCmdPost [^l]* cwindow
  autocmd QuickFixCmdPost l* lwindow
augroup END

"-------------------------------------------------------------------------------
" Commands
"-------------------------------------------------------------------------------

command! -nargs=* DDGR
      \ <mods> terminal ddgr --expand <args>
command! -nargs=1 Cheat
      \ <mods> terminal curl http://cheat.sh/<args>

" GitBrowse takes a dictionary and opens files on remote git repo websites.
function! GitBrowse(args) abort
  if a:args.filename ==# ''
    echoerr "Failed to `git browse`. Filename is missing or invalid."
    return
  endif
  let l:remote = trim(system('git config branch.'.a:args.branch.'.remote || echo "origin" '))
  if a:args.range == 0
    let l:cmd = 'git browse ' . l:remote . ' ' . a:args.filename
  else
    let l:cmd = 'git browse ' . l:remote . ' ' . a:args.filename . ' ' . a:args.line1 . ' ' . a:args.line2
  endif
  execute 'silent ! ' . l:cmd | redraw!
endfunction
" View git repo, branch, & file in the browser
command! -range GB
      \ call GitBrowse({
      \ 'branch': trim(system('git rev-parse --abbrev-ref HEAD 2>/dev/null')),
      \ 'filename': trim(system('git ls-files --full-name ' . expand('%'))),
      \ 'range': <range>,
      \ 'line1': <line1>,
      \ 'line2': <line2>,
      \ })
command! GC Git commit
command! GP Git! push
command! GR execute 'lcd ' . finddir('.git/..', expand('%:p:h').';')
command! GS Git! status %:h
command! GW Gwrite

" Custom function & command to launch the integrated terminal shell in the working directory of the current buffer as a split
function! Terminal(...) abort
  if has('nvim')
    if a:0 >= 1
      new
      call termopen(split(&shell) + split(&shellcmdflag) + [join(a:000,' ')], {'cwd': expand('%:p:h')})
    else
      new
      call termopen(split(&shell), {'cwd': expand('%:p:h')})
    endif
  else
    if a:0 >= 1
      call term_start(split(&shell) + split(&shellcmdflag) + [join(a:000,' ')], {'cwd': expand('%:p:h')})
    else
      call term_start(split(&shell), {'cwd': expand('%:p:h')})
    endif
  endif
endfunction
command! -nargs=* -complete=shellcmd Terminal call Terminal(<f-args>)

function! StripTrailingSpaces() abort
  %s/\s\+$//e
endfunction

function! StripTrailingNewLines() abort
  %s/\($\n\s*\)\+\%$//e
endfunction

augroup prewrites
  autocmd!
  autocmd BufWritePre,FileWritePre * call StripTrailingSpaces() | call StripTrailingNewLines()
augroup END

"-------------------------------------------------------------------------------
" Mappings
"-------------------------------------------------------------------------------

nnoremap <expr> n 'Nn'[v:searchforward]
nnoremap <expr> N 'nN'[v:searchforward]
nnoremap <leader>bb :b <c-d>
nnoremap <leader>cc <cmd>cc<cr>
nnoremap <leader>cd <cmd>lcd %:p:h<cr>
nnoremap <leader>ee :ed **/*
nnoremap <leader>es :sp **/*
nnoremap <leader>ev :vs **/*
nnoremap <leader>ff :Cfind * -name *
nnoremap <leader>gd <cmd>ALEGoToDefinition<cr>
nnoremap <leader>gg <cmd>Git<cr>
nnoremap <leader>gK <cmd>ALEDocumentation<cr>
nnoremap <leader>gk <cmd>ALEHover<cr>
nnoremap <leader>gm <cmd>ALEGoToImplementation<cr>
nnoremap <leader>gq mzgggqG`z
nnoremap <leader>gr <cmd>ALEFindReferences<cr>
nnoremap <leader>gy <cmd>ALEGoToTypeDefinition<cr>
nnoremap <leader>ll <cmd>ll<cr>
nnoremap <leader>tt :Terminal<space>
nnoremap <leader>w <cmd>write<cr>
nnoremap <leader>ya <cmd>%y+<cr>
nnoremap C "_C
nnoremap c "_c
nnoremap cc "_cc
nnoremap x "_x
nnoremap Y y$
tnoremap <esc> <c-\><c-n>
tnoremap <s-space> <space>

" Colorscheme
colorscheme pbnj
