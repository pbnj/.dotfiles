" vim:ts=2:sts=2:sw=2:et:
nnoremap <silent><nowait><space> <nop>
let g:mapleader = ' '

"-------------------------------------------------------------------------------
" Plugins
"-------------------------------------------------------------------------------

" https://github.com/junegunn/vim-plug/wiki/tips
let data_dir = has('nvim') ? stdpath('data') . '/site' : '~/.vim'
if empty(glob(data_dir . '/autoload/plug.vim'))
  silent execute '!curl -fLo '.data_dir.'/autoload/plug.vim --create-dirs  https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim'
  autocmd VimEnter * PlugInstall --sync | source $MYVIMRC
endif

" Enable built-in plugin to filter quickfix list. See :h :Cfilter
packadd cfilter

let g:netrw_keepdir    = 0
let g:netrw_localrmdir = 'rm -r'

" Custom, priavte work-related configs
if filereadable(glob('~/.vim/work.vim'))
  source ~/.vim/work.vim
endif

" vim-signify
let g:signify_sign_add               = '│'
let g:signify_sign_delete            = '│'
let g:signify_sign_delete_first_line = '│'
let g:signify_sign_change            = '│'
let g:signify_sign_change_delete     = g:signify_sign_change

" vim-mucomplete
let g:mucomplete#enable_auto_at_startup = 1
let g:mucomplete#chains                 = {}
let g:mucomplete#chains.vim             = [ 'path', 'cmd', 'c-n' , 'keyn' ]
let g:mucomplete#chains.default         = [ 'path', 'omni', 'vsnip', 'c-n' , 'keyn' ]

" vim-vsnip
let g:vsnip_snippet_dir = "~/.vim/snippets"

call plug#begin()
Plug 'https://github.com/editorconfig/editorconfig-vim'
Plug 'https://github.com/godlygeek/tabular'
Plug 'https://github.com/hrsh7th/vim-vsnip'
Plug 'https://github.com/hrsh7th/vim-vsnip-integ'
Plug 'https://github.com/junegunn/fzf', { 'do': { -> fzf#install() } }
Plug 'https://github.com/junegunn/fzf.vim'
Plug 'https://github.com/lifepillar/vim-mucomplete'
Plug 'https://github.com/machakann/vim-highlightedyank'
Plug 'https://github.com/mhinz/vim-signify'
Plug 'https://github.com/pbnj/pbnj.vim'
Plug 'https://github.com/pbnj/terradoc.vim'
Plug 'https://github.com/rafamadriz/friendly-snippets'
Plug 'https://github.com/sheerun/vim-polyglot'
Plug 'https://github.com/tpope/vim-commentary'
Plug 'https://github.com/tpope/vim-eunuch'
Plug 'https://github.com/tpope/vim-fugitive'
Plug 'https://github.com/tpope/vim-rsi'
Plug 'https://github.com/tpope/vim-surround'
Plug 'https://github.com/tpope/vim-unimpaired'
Plug 'https://github.com/tpope/vim-vinegar'
call plug#end()

filetype plugin indent on

"-------------------------------------------------------------------------------
" Options
"-------------------------------------------------------------------------------

if has('nvim')
  set inccommand=split
  augroup Terminal
    autocmd!
    autocmd TermEnter * setlocal nonumber
    autocmd TermLeave * setlocal   number
    autocmd TermOpen * startinsert
  augroup END
else
  if !isdirectory(expand('~/.vim/undo/')) | call mkdir(expand('~/.vim/undo/')) | endif
  set undodir=~/.vim/undo/
  set t_Co=16
  set ttyfast
endif

set autoindent
set autoread
set background=light
set backspace=indent,eol,start
set breakindent
set clipboard=unnamed,unnamedplus
set completeopt=menuone,noinsert,noselect
set cursorline
set dictionary+=/usr/share/dict/words
set encoding=utf-8
set errorformat^=%f:%l:%m,%f:%l:%c:%m
set fillchars=vert:\│,fold:-,eob:~
set formatoptions=tcqjno
set grepformat^=%f:%l:%c:%m
set hidden
set hlsearch
set incsearch
set infercase
set laststatus=2
set lazyredraw
set linebreak
set list
set listchars=tab:\│\ ,trail:·
set modeline
set mouse=
set nobackup
set nofoldenable
set norelativenumber
set noruler
set noswapfile
set nowrap
set number
set omnifunc=syntaxcomplete#Complete
set secure
set shortmess=filnxtToOc
set showmode
set signcolumn=yes
set smarttab
set splitbelow
set splitright
set ttimeout
set ttimeoutlen=50
set undofile
set wildignore=*.o,*.obj,*.bin,*.dll,*.exe,*.DS_Store,*.pdf,*/.ssh/*,*.pub,*.crt,*.key,*/cache/*,*/dist/*,*/node_modules/*,*/vendor/*,*/__pycache__/*,*/build/*,*/.git/*
set wildignorecase
set wildmenu

let g:git_prompt=''
function! GitStatusLine() abort
  let l:git_root = finddir('.git/..', expand('%:p:h').';')
  let l:git_prompt = trim(system('git -C '.l:git_root.' prompt'))
  if l:git_prompt =~# "(.*)"
    return l:git_prompt
  endif
  return g:git_prompt
endfunction

augroup git_prompt
  autocmd!
  autocmd BufWinEnter * let g:git_prompt = GitStatusLine()
  autocmd User FugitiveChanged let g:git_prompt = GitStatusLine()
augroup END

" set statusline=\ %f\ %y\ %#DiffAdd#%{FugitiveStatusline()}%*\ %#Error#%m%*%r%h%w%q
set statusline=\ %f\ %y\ %#DiffAdd#%{g:git_prompt}%*\ %#Error#%m%*%r%h%w%q

" Better grep
if executable('rg')
  set grepprg=rg\ --vimgrep\ --line-number\ --column\ $*
elseif executable('git')
  set grepprg=git\ grep\ --line-number\ --column\ $*
else
  set grepprg=grep\ -HIn\ --line-buffered\ $*
endif

"-------------------------------------------------------------------------------
" Commands
"-------------------------------------------------------------------------------

command! -nargs=* DDGR
      \ <mods> terminal ++close ddgr --expand --num 5 <args>
command! -nargs=1 Cheat
      \ <mods> terminal curl http://cheat.sh/<args>

" GitBrowse takes a dictionary and opens files on remote git repo websites.
function! GitBrowse(args) abort
  if a:args.filename ==# ''
    echoerr "Failed to `git browse`. Filename is missing or invalid."
    return
  endif
  let l:remote = trim(system('git config branch.'.a:args.branch.'.remote || echo "origin" '))
  if a:args.range == 0
    let l:cmd = 'git browse ' . l:remote . ' ' . a:args.filename
  else
    let l:cmd = 'git browse ' . l:remote . ' ' . a:args.filename . ' ' . a:args.line1 . ' ' . a:args.line2
  endif
  execute 'silent ! ' . l:cmd | redraw!
endfunction
" View git repo, branch, & file in the browser
command! -range GB
      \ call GitBrowse({
      \ 'branch': trim(system('git rev-parse --abbrev-ref HEAD 2>/dev/null')),
      \ 'filename': trim(system('git ls-files --full-name ' . expand('%'))),
      \ 'range': <range>,
      \ 'line1': <line1>,
      \ 'line2': <line2>,
      \ })
command! GC Git commit
command! GP Git! push
command! GR execute 'lcd ' . finddir('.git/..', expand('%:p:h').';')
command! GS Git! status %:h

function! StripTrailingSpaces() abort
  %s/\s\+$//e
endfunction
command! StripTrailingSpaces call StripTrailingSpaces()

function! StripTrailingNewLines() abort
  %s/\($\n\s*\)\+\%$//e
endfunction
command! StripTrailingNewLines call StripTrailingNewLines()

function! StripNewLines() abort
  g/^$/d
endfunction
command! StripNewLines call StripNewLines()

augroup fixer_general
  autocmd!
  autocmd BufWritePre,FileWritePre * call StripTrailingSpaces() | call StripTrailingNewLines()
augroup END

"-------------------------------------------------------------------------------
" Mappings
"-------------------------------------------------------------------------------

cnoremap <c-n> <c-Down>
cnoremap <c-p> <c-Up>
inoremap <c-f> <c-x><c-f>
nnoremap <expr> <leader>ss '/\<'.expand('<cword>').'\><cr>'
nnoremap <leader>bb <cmd>b#<cr>
nnoremap <leader>cc <cmd>cc<cr>
nnoremap <leader>cd <cmd>lcd %:p:h<cr>
nnoremap <leader>ee :ed **/*
nnoremap <leader>es :sp **/*
nnoremap <leader>ev :vs **/*
nnoremap <leader>ex <cmd>20Lexplore<cr>
nnoremap <leader>ff <cmd>Files<cr>
nnoremap <leader>gg <cmd>GFiles<cr>
nnoremap <leader>gq mzgggqG`z
nnoremap <leader>ll <cmd>ll<cr>
nnoremap <leader>tt :terminal<space>
nnoremap <leader>w <cmd>write<cr>
nnoremap <leader>ya <cmd>%y+<cr>
nnoremap C "_C
nnoremap Y y$
nnoremap c "_c
nnoremap cc "_cc
nnoremap x "_x
noremap <expr> N 'nN'[v:searchforward]
noremap <expr> n 'Nn'[v:searchforward]
tnoremap <esc> <c-\><c-n>
tnoremap <s-space> <space>

" Snippets
imap <expr> <C-l> vsnip#available(1) ? '<Plug>(vsnip-expand-or-jump)' : ''
imap <expr> <C-y> vsnip#available(1) ? '<Plug>(vsnip-expand-or-jump)' : '<C-y>'

colorscheme pbnj
