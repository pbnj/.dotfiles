#!/bin/bash

# Author:       Peter Benjamin
# Description:  Fuzzy Find Scalr Run Logs (Applies & Plans) & Browser Launcher
# Dependencies: scalr, jq, fzf
# Usage:        fzf-scalr

set -euo pipefail
[[ "${DEBUG:-}" == "true" ]] && set -x

# Get scalr hostname from config file.
# If doesn't exist, fail/exit early.
SCALR_HOSTNAME="$(jq -rc .hostname "${HOME}/.scalr/scalr.conf")"

if [[ -z "${SCALR_HOSTNAME}" ]]; then
  echo "ERROR: scalr hostname not found. Run 'scalr -configure' and try again."
  exit 1
fi

SCALR_GET_WORKSPACES="scalr get-workspaces | jq -rc '.[] | {name,id,environment}'"

SCALR_CACHE_FILE="/tmp/scalr-workspaces.json"

# Fuzzy find workspaces. On 1st run, get workspaces and cache them in /tmp/scalr-workspaces.json. On subsequent runs, load from cache.
SCALR_WORKSPACE_JSON="$(fzf --tmux='center,80%' --input-border --reverse --prompt='Scalr Workspaces> ' --header='CTRL-R (reload)' --bind="start:reload:[[ -f ${SCALR_CACHE_FILE} ]] && cat ${SCALR_CACHE_FILE} || ${SCALR_GET_WORKSPACES} | tee ${SCALR_CACHE_FILE}" --bind="ctrl-r:reload:${SCALR_GET_WORKSPACES} | tee ${SCALR_CACHE_FILE}" || true)"

if [[ -z "${SCALR_WORKSPACE_JSON}" ]]; then
  exit 0
fi

SCALR_WORKSPACE_NAME="$(jq -rc .name <<<"${SCALR_WORKSPACE_JSON}")"
SCALR_WORKSPACE_ID="$(jq -rc .id <<<"${SCALR_WORKSPACE_JSON}")"
SCALR_ENVIRONMENT_ID="$(jq -rc .environment.id <<<"${SCALR_WORKSPACE_JSON}")"

scalr_log_previewer() {
  SCALR_RUN_JSON="${1}"
  SCALR_APPLY_JSON="$(jq -rc 'select(.apply != null)' <<<"${SCALR_RUN_JSON}")"
  SCALR_PLAN_JSON="$(jq -rc 'select(.plan != null)' <<<"${SCALR_RUN_JSON}")"
  if [[ -n "${SCALR_APPLY_JSON}" ]]; then
    scalr get-apply-log -apply="$(jq -rc .apply.id <<<"${SCALR_APPLY_JSON}")"
  fi
  if [[ -n "${SCALR_PLAN_JSON}" ]]; then
    scalr get-plan-log -plan="$(jq -rc .plan.id <<<"${SCALR_PLAN_JSON}")"
  fi
}

# export bash functions to child processes
# https://github.com/junegunn/fzf/issues/1337
export -f scalr_log_previewer

FZF_HEADERS="$(cat <<EOF
ENTER: open in web / CTRL-R: reload / CTRL-O: open logs in $EDITOR
ALT-A: approve run / ALT-C: cancel run
EOF
)"

SCALR_RUNS="scalr get-runs -filter-workspace=${SCALR_WORKSPACE_ID} | jq -rc .[]"

fzf \
  --bind="alt-a:execute:jq -rc .id <<<{} | xargs -t -I% scalr confirm-run -run=%" \
  --bind="alt-c:execute:jq -rc .id <<<{} | xargs -t -I% scalr cancel-run -run=%" \
  --bind="ctrl-o:execute:${EDITOR} $(scalr_log_previewer {})" \
  --bind="ctrl-r:reload:${SCALR_RUNS}" \
  --bind="enter:execute:jq -rc .id <<<{} | xargs -t -I% open https://${SCALR_HOSTNAME}/v2/e/${SCALR_ENVIRONMENT_ID}/workspaces/${SCALR_WORKSPACE_ID}/runs/%" \
  --bind="start:reload:${SCALR_RUNS}" \
  --header="${FZF_HEADERS}" \
  --input-border \
  --preview-window='bottom' \
  --preview='scalr_log_previewer {}' \
  --prompt="Scalr Runs (${SCALR_WORKSPACE_NAME})> " \
  --reverse \
  --tmux='center,80%' || true
