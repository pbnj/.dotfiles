#!/bin/bash

# Author: Peter Benjamin
# Description: fuzzy find aws profiles and generate credentials as env vars or write to `~/.aws/credentials` file
# Dependencies: brew install jq fzf awscli
# Usage: aws-sso-creds [format (`env` or `file`)] [profile]

set -euo pipefail

# prompt user for output format
OUTPUT_FORMAT="${1:-$(fzf --tmux --reverse --prompt='Output Format (default: "env")> ' < <(echo -e "env\nfile"))}"

# prompt user to fuzzy find aws profiles
AWS_PROFILE="${2:-$(sed -nr 's/\[profile (.*)\]/\1/p' ~/.aws/config | fzf --tmux --reverse --prompt='AWS Profile> ')}"

# if no current aws sso session, then authenticate
if ! aws sts get-caller-identity --profile "${AWS_PROFILE}" &>/dev/null; then
  aws sso login &>/dev/null
fi

# if `env`, then use the built-in command to produce env vars: `aws configure export-credentials --format env`
if [ "${OUTPUT_FORMAT}" == "env" ]; then
  echo "# aws configure export-credentials --profile \"${AWS_PROFILE}\" --format env"
  aws configure export-credentials --profile "${AWS_PROFILE}" --format env

# if `credentials file`, then parse JSON output and overwrite `~/.aws/credentials` with new creds
elif [ "${OUTPUT_FORMAT}" == "file" ]; then
  AWS_SSO_CREDENTIALS="$(aws configure export-credentials --profile "${AWS_PROFILE}")"
  AWS_ACCESS_KEY_ID="$(jq -rc .AccessKeyId <<<"${AWS_SSO_CREDENTIALS}")"
  AWS_SECRET_ACCESS_KEY="$(jq -rc .SecretAccessKey <<<"${AWS_SSO_CREDENTIALS}")"
  AWS_SESSION_TOKEN="$(jq -rc .SessionToken <<<"${AWS_SSO_CREDENTIALS}")"

  echo "Running: gimme-sso-creds file ${AWS_PROFILE}"

  cat <<EOF >"${HOME}/.aws/credentials"
# Generated by: gimme-sso-creds file ${AWS_PROFILE}

# Credentials for profile "${AWS_PROFILE}"
[default]
aws_access_key_id = ${AWS_ACCESS_KEY_ID}
aws_secret_access_key = ${AWS_SECRET_ACCESS_KEY}
aws_session_token = ${AWS_SESSION_TOKEN}

EOF

  echo "Credentials written successfully in: ${HOME}/.aws/credentials"

fi
