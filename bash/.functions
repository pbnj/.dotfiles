# vim:ft=bash:
# shellcheck shell=bash

########################################
# General functions
########################################

vimgrep() {
	if [[ -z "${@}" ]]; then
		echo "${@}"
		echo "Error: missing argument(s)"
		echo "Usage: $ vimgrep <pattern> [<arguments>,...]"
		echo 'See `vim -c ":h :grep"` for details'
		return 1
	fi
	eval "vim -c \"grep ${@}\""
}

########################################
# Kubernetes
########################################

kash() {
	docker run --rm -it --volume="${HOME}/.kube/configs:/.kube/configs" --workdir=/.kube/configs --entrypoint=/bin/bash bitnami/kubectl:latest
}

# prompt for kubeconfig + namespace
kcfg() {
	local kubeconfig
	kubeconfig="$(find "${HOME}/.kube/configs" -type f | fzf --height=20)"

	if [[ -n "${kubeconfig}" ]]; then
		export KUBECONFIG="${kubeconfig}"
	fi
}
kns() {
	local kubenamespace
	kubenamespace="$(kubectl get ns -o name | cut -d '/' -f 2 | fzf --height=20)"
	if [[ -n "${kubenamespace}" ]]; then
		export KUBENS="${kubenamespace}"
	fi
}

########################################
# Custom FZF Completions
########################################

# gw <tab>
_fzf_complete_gw() {
	_fzf_complete --reverse --prompt="gw> " -- "$@" < <(
		yq '. | keys' ~/.config/gw/config.yaml | grep -v '#' | tr -d '[- ]'
	)
}
complete -o default -o bashdefault -F _fzf_complete_gw gw

# bconsole **<tab>
_fzf_complete_bconsole() {
	_fzf_complete --reverse --prompt="britive console> " -- "$@" < <(
		npx britive-cli listprofiles 2>/dev/null | jq -rc .[].environmentName | awk -F'[()]' '{print $1"\n"$2}'
	)
}
complete -o default -o bashdefault -F _fzf_complete_bconsole bconsole
